#!/usr/bin/env python3
"""
Gerador de Relat√≥rios PDF para An√°lise de Dados Starlink
"""

import io
import base64
from datetime import datetime
from typing import Dict, List, Optional
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import plotly.graph_objects as go
import plotly.io as pio
from plotly.utils import PlotlyJSONEncoder
import json

class StarlinkPDFGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
        
    def setup_custom_styles(self):
        """Configura estilos personalizados para o PDF."""
        # T√≠tulo principal
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        ))
        
        # Subt√≠tulo
        self.styles.add(ParagraphStyle(
            name='CustomHeading1',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.darkblue
        ))
        
        # Cabe√ßalho de se√ß√£o
        self.styles.add(ParagraphStyle(
            name='CustomHeading2',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=8,
            textColor=colors.darkgreen
        ))
        
        # Texto normal
        self.styles.add(ParagraphStyle(
            name='CustomNormal',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=6
        ))
        
        # Texto de m√©trica
        self.styles.add(ParagraphStyle(
            name='MetricText',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=4,
            textColor=colors.darkred,
            alignment=TA_CENTER
        ))

    def plotly_to_image(self, fig, width=800, height=400):
        """Converte gr√°fico Plotly para imagem."""
        try:
            # Converte para imagem PNG
            img_bytes = pio.to_image(fig, format="png", width=width, height=height)
            return Image(io.BytesIO(img_bytes), width=width*0.75, height=height*0.75)
        except Exception as e:
            print(f"Erro ao converter gr√°fico: {e}")
            return None

    def create_throughput_chart(self, df, title="Throughput em Tempo Real"):
        """Cria gr√°fico de throughput."""
        if df.empty:
            return None
            
        fig = go.Figure()
        
        # Adiciona linhas de throughput
        fig.add_trace(go.Scatter(
            x=df['timestamp'], 
            y=df['downlink_mbps'], 
            mode='lines',
            name='Download (Mbps)',
            line=dict(color='blue', width=2)
        ))
        
        fig.add_trace(go.Scatter(
            x=df['timestamp'], 
            y=df['uplink_mbps'], 
            mode='lines',
            name='Upload (Mbps)',
            line=dict(color='red', width=2)
        ))
        
        fig.update_layout(
            title=title,
            xaxis_title='Timestamp',
            yaxis_title='Throughput (Mbps)',
            hovermode='x unified',
            showlegend=True,
            width=800,
            height=400
        )
        
        return self.plotly_to_image(fig)

    def create_daily_consumption_chart(self, daily_df, title="Consumo Di√°rio de Dados"):
        """Cria gr√°fico de consumo di√°rio."""
        if daily_df.empty:
            return None
            
        fig = go.Figure()
        
        # Gr√°fico de barras
        fig.add_trace(go.Bar(
            x=daily_df['date'], 
            y=daily_df['download_gb'], 
            name='Download (GB)',
            marker_color='blue',
            text=[f"{x:.2f}" for x in daily_df['download_gb']],
            textposition='auto'
        ))
        
        fig.add_trace(go.Bar(
            x=daily_df['date'], 
            y=daily_df['upload_gb'], 
            name='Upload (GB)',
            marker_color='red',
            text=[f"{x:.2f}" for x in daily_df['upload_gb']],
            textposition='auto'
        ))
        
        fig.update_layout(
            title=title,
            xaxis_title='Data',
            yaxis_title='Consumo (GB)',
            barmode='group',
            showlegend=True,
            width=800,
            height=400
        )
        
        return self.plotly_to_image(fig)

    def create_cumulative_chart(self, daily_df, title="Consumo Acumulado"):
        """Cria gr√°fico de consumo acumulado."""
        if daily_df.empty:
            return None
            
        # Calcula valores acumulados
        daily_df = daily_df.copy()
        daily_df['download_cumulative'] = daily_df['download_gb'].cumsum()
        daily_df['upload_cumulative'] = daily_df['upload_gb'].cumsum()
        daily_df['total_cumulative'] = daily_df['total_gb'].cumsum()
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=daily_df['date'], 
            y=daily_df['download_cumulative'], 
            mode='lines+markers',
            name='Download Acumulado (GB)',
            line=dict(color='blue', width=3)
        ))
        
        fig.add_trace(go.Scatter(
            x=daily_df['date'], 
            y=daily_df['upload_cumulative'], 
            mode='lines+markers',
            name='Upload Acumulado (GB)',
            line=dict(color='red', width=3)
        ))
        
        fig.add_trace(go.Scatter(
            x=daily_df['date'], 
            y=daily_df['total_cumulative'], 
            mode='lines+markers',
            name='Total Acumulado (GB)',
            line=dict(color='green', width=3)
        ))
        
        fig.update_layout(
            title=title,
            xaxis_title='Data',
            yaxis_title='Consumo Acumulado (GB)',
            showlegend=True,
            width=800,
            height=400
        )
        
        return self.plotly_to_image(fig)

    def create_distribution_chart(self, df, column, title, color='blue'):
        """Cria gr√°fico de distribui√ß√£o."""
        if df.empty or column not in df.columns:
            return None
            
        fig = go.Figure()
        
        fig.add_trace(go.Histogram(
            x=df[column],
            nbinsx=20,
            name=title,
            marker_color=color
        ))
        
        fig.update_layout(
            title=title,
            xaxis_title=column.replace('_', ' ').title(),
            yaxis_title='Frequ√™ncia',
            width=400,
            height=300
        )
        
        return self.plotly_to_image(fig)

    def generate_pdf_report(self, 
                          df: pd.DataFrame, 
                          daily_df: pd.DataFrame,
                          file_info: Dict,
                          total_usage: Dict = None,
                          output_path: str = "starlink_report.pdf"):
        """Gera relat√≥rio PDF completo."""
        
        doc = SimpleDocTemplate(output_path, pagesize=A4)
        story = []
        
        # T√≠tulo principal
        story.append(Paragraph("üöÄ RELAT√ìRIO DE AN√ÅLISE STARLINK", self.styles['CustomTitle']))
        story.append(Spacer(1, 20))
        
        # Informa√ß√µes do arquivo
        story.append(Paragraph("üìä Informa√ß√µes do Arquivo", self.styles['CustomHeading1']))
        story.append(Paragraph(f"<b>Arquivo:</b> {file_info.get('filename', 'N/A')}", self.styles['CustomNormal']))
        story.append(Paragraph(f"<b>Data de Gera√ß√£o:</b> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}", self.styles['CustomNormal']))
        story.append(Paragraph(f"<b>Total de Registros:</b> {len(df):,}", self.styles['CustomNormal']))
        story.append(Paragraph(f"<b>Per√≠odo:</b> {file_info.get('period', 'N/A')}", self.styles['CustomNormal']))
        story.append(Spacer(1, 20))
        
        # M√©tricas principais (como na interface)
        if total_usage:
            story.append(Paragraph("üìä M√©tricas Principais", self.styles['CustomHeading1']))
            
            # Tabela de m√©tricas principais
            metrics_data = [
                ['M√©trica', 'Valor'],
                ['Download', f"{total_usage.get('download_gb', 0):.2f} GB"],
                ['Upload', f"{total_usage.get('upload_gb', 0):.2f} GB"],
                ['Total', f"{total_usage.get('total_gb', 0):.2f} GB"],
                ['Gaps Detectados', str(total_usage.get('gaps', 0))],
                ['Registros Processados', f"{len(df):,}"]
            ]
            
            metrics_table = Table(metrics_data)
            metrics_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('FONTSIZE', (0, 1), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(metrics_table)
            story.append(Spacer(1, 20))
        
        # Estat√≠sticas de throughput
        if not df.empty:
            story.append(Paragraph("üìà Estat√≠sticas de Throughput", self.styles['CustomHeading1']))
            
            # Tabela de estat√≠sticas
            stats_data = [
                ['M√©trica', 'Download (Mbps)', 'Upload (Mbps)'],
                ['M√©dia', f"{df['downlink_mbps'].mean():.2f}", f"{df['uplink_mbps'].mean():.2f}"],
                ['M√°ximo', f"{df['downlink_mbps'].max():.2f}", f"{df['uplink_mbps'].max():.2f}"],
                ['M√≠nimo', f"{df['downlink_mbps'].min():.2f}", f"{df['uplink_mbps'].min():.2f}"],
                ['Mediana', f"{df['downlink_mbps'].median():.2f}", f"{df['uplink_mbps'].median():.2f}"]
            ]
            
            stats_table = Table(stats_data)
            stats_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(stats_table)
            story.append(Spacer(1, 20))
        
        # Se√ß√£o: Aba Throughput
        story.append(Paragraph("‚ö° ABA: THROUGHPUT", self.styles['CustomHeading1']))
        story.append(Paragraph("Throughput ao Longo do Tempo", self.styles['CustomHeading2']))
        
        # Gr√°fico de throughput
        throughput_chart = self.create_throughput_chart(df)
        if throughput_chart:
            story.append(throughput_chart)
            story.append(Spacer(1, 20))
        else:
            story.append(Paragraph("‚ö†Ô∏è Gr√°fico de throughput n√£o dispon√≠vel", self.styles['CustomNormal']))
            story.append(Spacer(1, 20))
        
        # Se√ß√£o: Aba Consumo Di√°rio
        if not daily_df.empty:
            story.append(Paragraph("üìÖ ABA: CONSUMO DI√ÅRIO", self.styles['CustomHeading1']))
            
            # Gr√°fico de consumo di√°rio
            daily_chart = self.create_daily_consumption_chart(daily_df)
            if daily_chart:
                story.append(Paragraph("Consumo Di√°rio por Tipo", self.styles['CustomHeading2']))
                story.append(daily_chart)
                story.append(Spacer(1, 20))
            
            # Gr√°fico acumulado
            cumulative_chart = self.create_cumulative_chart(daily_df)
            if cumulative_chart:
                story.append(Paragraph("Consumo Acumulado", self.styles['CustomHeading2']))
                story.append(cumulative_chart)
                story.append(Spacer(1, 20))
            
            # Tabela de consumo di√°rio
            story.append(Paragraph("Tabela de Consumo Di√°rio", self.styles['CustomHeading2']))
            
            # Prepara dados da tabela
            table_data = [['Data', 'Download (GB)', 'Upload (GB)', 'Total (GB)', 'Gaps', 'Registros']]
            for _, row in daily_df.iterrows():
                table_data.append([
                    str(row['date']),
                    f"{row['download_gb']:.3f}",
                    f"{row['upload_gb']:.3f}",
                    f"{row['total_gb']:.3f}",
                    str(row['gaps']),
                    str(row['records'])
                ])
            
            daily_table = Table(table_data)
            daily_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(daily_table)
            story.append(Spacer(1, 20))
            
            # Estat√≠sticas di√°rias
            story.append(Paragraph("üìä Estat√≠sticas Di√°rias", self.styles['CustomHeading2']))
            daily_stats = [
                f"<b>Maior consumo di√°rio:</b> {daily_df['total_gb'].max():.2f} GB",
                f"<b>Menor consumo di√°rio:</b> {daily_df['total_gb'].min():.2f} GB",
                f"<b>M√©dia di√°ria:</b> {daily_df['total_gb'].mean():.2f} GB",
                f"<b>Total de dias analisados:</b> {len(daily_df)} dias"
            ]
            
            for stat in daily_stats:
                story.append(Paragraph(stat, self.styles['CustomNormal']))
            
            story.append(Spacer(1, 20))
        
        # Se√ß√£o: Aba Distribui√ß√£o
        if not df.empty:
            story.append(Paragraph("üìä ABA: DISTRIBUI√á√ÉO", self.styles['CustomHeading1']))
            
            # Cria duas colunas para os gr√°ficos de distribui√ß√£o
            col1_data = self.create_distribution_chart(df, 'downlink_mbps', 'Distribui√ß√£o Download (Mbps)', 'blue')
            col2_data = self.create_distribution_chart(df, 'uplink_mbps', 'Distribui√ß√£o Upload (Mbps)', 'red')
            
            if col1_data and col2_data:
                # Tabela com duas colunas para os gr√°ficos
                dist_table = Table([[col1_data, col2_data]], colWidths=[4*inch, 4*inch])
                dist_table.setStyle(TableStyle([
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
                ]))
                story.append(dist_table)
                story.append(Spacer(1, 20))
        
        # Resumo final
        story.append(Paragraph("üìã Resumo Executivo", self.styles['CustomHeading1']))
        
        if not daily_df.empty:
            total_download = daily_df['download_gb'].sum()
            total_upload = daily_df['upload_gb'].sum()
            total_consumption = total_download + total_upload
            
            summary_text = f"""
            <b>Consumo Total de Dados:</b><br/>
            ‚Ä¢ Download: {total_download:.2f} GB<br/>
            ‚Ä¢ Upload: {total_upload:.2f} GB<br/>
            ‚Ä¢ Total: {total_consumption:.2f} GB<br/><br/>
            
            <b>Per√≠odo de An√°lise:</b> {len(daily_df)} dias<br/>
            <b>M√©dia Di√°ria:</b> {total_consumption/len(daily_df):.2f} GB/dia<br/>
            <b>Arquivo Analisado:</b> {file_info.get('filename', 'N/A')}
            """
        else:
            summary_text = f"""
            <b>Arquivo Analisado:</b> {file_info.get('filename', 'N/A')}<br/>
            <b>Registros Processados:</b> {len(df):,}<br/>
            <b>Status:</b> Dados processados com sucesso
            """
        
        story.append(Paragraph(summary_text, self.styles['CustomNormal']))
        
        # Rodap√©
        story.append(Spacer(1, 30))
        story.append(Paragraph("Relat√≥rio gerado automaticamente pelo Starlink Data Analyzer", 
                              self.styles['CustomNormal']))
        
        # Gera o PDF
        doc.build(story)
        return output_path

def generate_pdf_report(df, daily_df, file_info, total_usage=None, output_path="starlink_report.pdf"):
    """Fun√ß√£o de conveni√™ncia para gerar relat√≥rio PDF."""
    generator = StarlinkPDFGenerator()
    return generator.generate_pdf_report(df, daily_df, file_info, total_usage, output_path)
